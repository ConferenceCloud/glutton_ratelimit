diff --git a/lib/glutton_ratelimit.rb b/lib/glutton_ratelimit.rb
index 184a5d6..25fbc05 100644
--- a/lib/glutton_ratelimit.rb
+++ b/lib/glutton_ratelimit.rb
@@ -20,6 +20,15 @@ module GluttonRatelimit
       @executions = executions
       @time_period = time_period
     end
+
+    def loop(&block)
+      raise ArgumentError, "Code block expected" if not block
+      loop do
+        yield
+        wait
+      end
+    end
+
   end
 end
 
diff --git a/lib/glutton_ratelimit/bursty_token_bucket.rb b/lib/glutton_ratelimit/bursty_token_bucket.rb
index 85deeef..e088192 100644
--- a/lib/glutton_ratelimit/bursty_token_bucket.rb
+++ b/lib/glutton_ratelimit/bursty_token_bucket.rb
@@ -8,11 +8,12 @@ module GluttonRatelimit
     end
     
     def wait
-      reset_bucket if @tokens.nil?
+      reset_bucket  if @tokens.nil?
       
       if @tokens.zero?
         delta = Time.now - @oldest_timestamp
-        sleep(@time_period - delta) if delta < @time_period
+        sleep_time = @time_period - delta
+        sleep(sleep_time)  if sleep_time > 0 
         reset_bucket
       end
       
diff --git a/test/testing_module.rb b/test/testing_module.rb
index 8cfc333..ae0ffa0 100644
--- a/test/testing_module.rb
+++ b/test/testing_module.rb
@@ -30,8 +30,9 @@ module TestingModule
     min_time = 1
     rl = @testClass.new 50, min_time
     delta = timed_run(rl) { sleep 0 }
-    #puts "#{delta} >? #{min_time}"
-    assert delta > min_time
+    #puts "#{delta} >? #{min_time} #{delta / min_time}"
+    # Allowed to be off by 0.1% since there is no task time.
+    assert (delta / min_time) > 0.999
   end
   
   def test_1_task_every_1_seconds_with_1_second_task
@@ -54,7 +55,9 @@ module TestingModule
     min_time = 0.5
     rl = @testClass.new 120, min_time
     delta = timed_run(rl, 2) { sleep 0 }
-    assert delta > min_time * 2
+    #puts "#{delta} >? #{min_time*2} #{delta / (min_time*2)}"
+    # Allowed to be off by 0.1% since there is no task time.
+    assert (delta / min_time * 2) > 0.999
   end
   
   def test_10_tasks_every_1_seconds_two_runs_with_short_rnd_task
