= glutton_ratelimit

A Ruby library for limiting the number of times a method can be invoked within a specified time period.

The rate-limiting is simple if somewhat na√Øve. Throttled methods are blocked using sleep.

== Use Cases

You might wish to use this library to throttle code that:

* Accesses a 3rd-party API that imposes a maximum rate-limit. 
* Scrapes data from any website where rapid repeated access is banned.

For example, Echo Nest API requests need to be limited to 120 every minute.

== Instant Method Limiting
    
The rate_limit method can be used at the end of a class definition to limit specific instance methods. 
        
    class LimitInstanceMethod
      # The class must be extended to permit limiting.
      extend GluttonRatelimit
        
      def initialize
        @start = Time.now
      end
      
      def limit_me
        puts "#{Time.now - @start}"
      end
      
      # Maximum of six limit_me executions every six seconds.
      # Defaults to the AveragedThrottle limiting.
      rate_limit :limit_me, 6, 6
    end
    
    t = LimitInstanceMethod.new
    
    10.times { t.limit_me }

== Simple Manual Limiting

Chunks of code can also be manually throttled using the wait method of a specific GluttonRatelimit object.

    # Maximum of twelve executions every five seconds.
    rl = GluttonRatelimit::BurstyTokenBucket.new 12, 5
    
    25.times do
      # BurstyTokenBucket will allow for a full burst of executions followed by a pause.
      rl.wait
      # Simulating a constant-time task:
      sleep 0.1
    end
    
    # Maximum of six executions every six seconds.
    rl = GluttonRatelimit::AveragedThrottle.new 6, 6
    13.times do
      # AverageThrottle will attempt to evenly space executions within the allowed period.
      rl.wait
      # Simulating a 0 to 1 second random-time task:
      sleep rand
    end
    
== More Examples

More examples can be found within the examples folder.

== Types of Limiting

There are two types of rate limiting provided by this library:

* Bursty Token Bucket Limiting (GluttonRatelimit::BurstyTokenBucket)
* Average Throttle Limiting (GluttonRatelimit::AveragedThrottle)

== Warnings

The inaccuracy of Ruby's sleep method causes problems when trying to rate-limit methods which take less than 0.001 seconds to execute.

See: http://codeidol.com/other/rubyckbk/Date-and-Time/Waiting-a-Certain-Amount-of-Time/
    
== Thanks

Some of the algorithms were inspired by these discussions:

* http://stackoverflow.com/questions/667508/whats-a-good-rate-limiting-algorithm
* http://stackoverflow.com/questions/1407113/throttling-method-calls-to-m-requests-in-n-seconds

== License

This is free and unencumbered software released into the public domain. See LICENSE for details.
